<?php
$logFile = __DIR__ . '/../logs/telegram.log';
require_once __DIR__ . '/../vendor/autoload.php';

$autoloadPath = __DIR__ . '/../vendor/autoload.php';
if (!file_exists($autoloadPath)) {
    http_response_code(500);
    echo json_encode(["success" => false, "message" => "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"]);
    exit;
}

if (!file_exists($logFile)) {
    http_response_code(500);
    echo json_encode(["success" => false, "message" => "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–≥–∞ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!"]);
    exit;
}
require_once $autoloadPath;

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/../');
$dotenv->load();

header('Content-Type: application/json');

function logToTelegramFile($message)
{
    global $logFile;
    $timestamp = date("Y-m-d H:i:s");
    $entry = "[$timestamp] $message" . PHP_EOL;
    file_put_contents($logFile, $entry, FILE_APPEND | LOCK_EX);
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    echo json_encode(['success' => false, 'message' => '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞!']);
    exit;
}

function verifyTurnstile($token)
{
    $secretKey = $_ENV['TURNSTILE_SECRET_KEY'];
    $url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify';

    $data = [
        'secret' => $secretKey,
        'response' => $token,
        'remoteip' => $_SERVER['REMOTE_ADDR']
    ];

    $options = [
        'http' => [
            'method' => 'POST',
            'header' => "Content-type: application/x-www-form-urlencoded\r\n",
            'content' => http_build_query($data)
        ]
    ];

    $context = stream_context_create($options);
    $result = file_get_contents($url, false, $context);
    return json_decode($result)->success ?? false;
}

if (!isset($_POST['cf-turnstile-response']) || !verifyTurnstile($_POST['cf-turnstile-response'])) {
    echo json_encode(['success' => false, 'message' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ CAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!']);
    exit;
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è
$name = trim($_POST['name'] ?? '');
$field = trim($_POST['field'] ?? ''); // —ç—Ç–æ IdMessenger: 1 –∏–ª–∏ 2
$phone = trim($_POST['phone'] ?? '');
$topic = trim($_POST['topic'] ?? '');
$message = trim($_POST['message'] ?? '');
$agree = isset($_POST['privacy-policy']);

// –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +
$cleanPhone = preg_replace('/[^\d+]/', '', $phone);

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
if (empty($name) || mb_strlen($name) < 3 || !preg_match('/^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$/u', $name)) {
    echo json_encode(['success' => false, 'message' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!']);
    exit;
}

if (!in_array($field, ['1', '2'])) {
    echo json_encode(['success' => false, 'message' => '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è —Å–≤—è–∑–∏!']);
    exit;
}

if (empty($cleanPhone) || !preg_match('/^\+7\d{10}$/', $cleanPhone)) {
    echo json_encode(['success' => false, 'message' => '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!']);
    exit;
}

if (empty($topic) || mb_strlen($topic) < 3) {
    echo json_encode(['success' => false, 'message' => '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è!']);
    exit;
}

if (empty($message)) {
    echo json_encode(['success' => false, 'message' => '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!']);
    exit;
}

if (!$agree) {
    echo json_encode(['success' => false, 'message' => '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!']);
    exit;
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $pdo = new PDO(
        'mysql:host=localhost;dbname=' . $_ENV['DB_NAME'] . ';charset=utf8mb4',
        $_ENV['DB_USERNAME'],
        $_ENV['DB_PASSWORD'],
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );

    // –í—Å—Ç–∞–≤–∫–∞
    $stmt = $pdo->prepare("INSERT INTO FeedbackForm (Name, Phone, MessengerId, Topic, Message, PrivacyCheckbox) VALUES (?, ?, ?, ?, ?, ?)");
    $stmt->execute([$name, $cleanPhone, $field, $topic, $message, true]);

    // Telegram section
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
    $messengerMap = ['1' => 'Telegram', '2' => 'WhatsApp'];
    $messengerText = $messengerMap[$field] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $tgMessage = "üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:\n\n";
    $tgMessage .= "üë§ –ò–º—è: $name\n";
    $tgMessage .= "üì± –¢–µ–ª–µ—Ñ–æ–Ω: $cleanPhone\n";
    $tgMessage .= "üí¨ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: $messengerText\n";
    $tgMessage .= "üìå –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: $topic\n";
    $tgMessage .= "üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n$message\n";
    $tgMessage .= "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π: –î–∞\n\n";
    $tgMessage .= "üîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:\n";
    $tgMessage .= "Telegram: https://t.me/$cleanPhone\n";
    $tgMessage .= "WhatsApp: https://wa.me/" . ltrim($cleanPhone, '+') . "\n";

    // Telegram bot
    $botToken = $_ENV['BOT_TOKEN'];
    $tgApiUrl = "https://api.telegram.org/bot$botToken/sendMessage";

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ chat_id –∏–∑ –ë–î
    try {
        $chatQuery = $pdo->query("SELECT IdTgChat, ChatId, ChatTitle FROM TgChats");
        $chatRows = $chatQuery->fetchAll(PDO::FETCH_ASSOC);

        $deletedChats = [];

        foreach ($chatRows as $row) {
            $chatId = $row['ChatId'];
            $chatDbId = $row['IdTgChat'];
            $chatTitle = $row['ChatTitle'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

            $postData = [
                'chat_id' => $chatId,
                'text' => $tgMessage,
                'parse_mode' => 'HTML'
            ];

            $ch = curl_init($tgApiUrl);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            if ($httpCode === 200) {
                // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                $updateSuccess = $pdo->prepare("UPDATE TgChats SET LastMessageSuccessAt = NOW(), ErrorCount = 0 WHERE IdTgChat = ?");
                $updateSuccess->execute([$chatDbId]);
                logToTelegramFile("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {$chatId} ({$chatTitle})");
            } elseif (in_array($httpCode, [400, 403])) {
                // –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ‚Äì –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º ErrorCount
                $pdo->prepare("UPDATE TgChats SET ErrorCount = ErrorCount + 1 WHERE IdTgChat = ?")->execute([$chatDbId]);

                logToTelegramFile("‚ö†Ô∏è –û—à–∏–±–∫–∞ $httpCode –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {$chatId} ({$chatTitle}). –£–≤–µ–ª–∏—á–µ–Ω ErrorCount.");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º ErrorCount
                $countStmt = $pdo->prepare("SELECT ErrorCount FROM TgChats WHERE IdTgChat = ?");
                $countStmt->execute([$chatDbId]);
                $errorCount = $countStmt->fetchColumn();

                if ($errorCount > 3) {
                    // –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –ë–î
                    $pdo->prepare("DELETE FROM TgChats WHERE IdTgChat = ?")->execute([$chatDbId]);
                    $deletedChats[] = [
                        'id' => $chatId,
                        'title' => $chatTitle
                    ];
                    logToTelegramFile("‚ùå –ß–∞—Ç {$chatId} ({$chatTitle}) —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ –±–æ–ª–µ–µ 3 –æ—à–∏–±–æ–∫.");
                }
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Ç—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        if (!empty($deletedChats)) {
            $remainingChats = $pdo->query("SELECT ChatId FROM TgChats")->fetchAll(PDO::FETCH_COLUMN);

            foreach ($deletedChats as $deleted) {
                $deleteMsg = "‚ö†Ô∏è –ß–∞—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n";
                $deleteMsg .= "Chat ID: <code>{$deleted['id']}</code>\n\n";
                $deleteMsg .= "–ù–∞–∑–≤–∞–Ω–∏–µ: {$deleted['title']}\n\n";
                $deleteMsg .= "–ü—Ä–∏—á–∏–Ω–∞: —á–∞—Ç –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –±—ã–ª –∏–∑ –Ω–µ–≥–æ —É–¥–∞–ª–µ–Ω.";

                foreach ($remainingChats as $chatId) {
                    $postData = [
                        'chat_id' => $chatId,
                        'text' => $deleteMsg,
                        'parse_mode' => 'HTML'
                    ];

                    $ch = curl_init($tgApiUrl);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
                    curl_exec($ch);
                    curl_close($ch);

                    logToTelegramFile("‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {$deleted['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {$chatId}");
                }
            }
        }

    } catch (Exception $e) {
        $errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram-—á–∞—Ç–∞–º–∏: " . $e->getMessage();
        error_log($errorMsg);
        logToTelegramFile("üî• $errorMsg");
    }

    echo json_encode(['success' => true]);
} catch (Exception $e) {
    error_log($e->getMessage());
    echo json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!']);
}
